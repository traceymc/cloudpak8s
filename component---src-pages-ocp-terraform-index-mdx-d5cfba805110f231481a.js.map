{"version":3,"sources":["webpack:///./src/pages/ocp/terraform/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4eAMO,IAAMA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,+DACA,iHACa,0BAAYC,WAAW,KAAvB,wBADb,6aAOA,qMAGA,gEAA+C,kBAAIA,WAAW,KAAf,4BAA/C,gPAIA,6CACA,+RAIA,6CACA,0kBAQA,+UAIF,0BAAYA,WAAW,KAAvB,uBAJE,gHAMA,kDACA,2FAA0E,0BAAYA,WAAW,KAAvB,QAA1E,+HAE+B,0BAAYA,WAAW,KAAvB,QAF/B,8GAIA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAApB,2MAGA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAApB,gLAGA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,QAApB,0DAAgI,0BAAYA,WAAW,MAAvB,QAAhI,4GAEQ,kBAAIA,WAAW,MAAf,WAFR,wJAKA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,iFACkB,0BAAYA,WAAW,MAAvB,gBADlB,6HAIF,6CACA,gHACS,0BAAYA,WAAW,KAAvB,gBADT,aAC+E,0BAAYA,WAAW,KAAvB,kBAD/E,8FAGA,kCAAiB,0BAAYA,WAAW,KAAvB,kBAAjB,gOAIA,2CAA0B,0BAAYA,WAAW,KAAvB,mBAA1B,2DACY,0BAAYA,WAAW,KAAvB,WADZ,4HAGA,6DACA,gEAA+C,0BAAYA,WAAW,KAAvB,aAA/C,iFACmD,0BAAYA,WAAW,KAAvB,mBADnD,QACuH,kBAAIA,WAAW,MADtI,wJAGsE,kBAAIA,WAAW,MAHrF,0NAOA,2CACA,2hBAUA,gEACA,8XAMuC,mBAAGA,WAAW,KAAQ,CACzD,KAAQ,uBAD2B,OANvC,MASF,mBAAGA,WAAW,KAAQ,CAChB,KAAQ,yBADd,SATE,KAWwB,mBAAGA,WAAW,KAAQ,CAC1C,KAAQ,uBADY,yBAXxB,UAcE,mBAAGA,WAAW,KAAQ,CACpB,KAAQ,0BADV,UAdF,MAqBJJ,EAAWK,gBAAiB","file":"component---src-pages-ocp-terraform-index-mdx-d5cfba805110f231481a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/cloudpak8s/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Terraform Introduction and Motivation`}</h2>\n    <p>{`Terraform is an open source infrastructure automation tool, which can be\ninstalled from `}<inlineCode parentName=\"p\">{`https://terraform.io`}</inlineCode>{`. Using it, infrastructure can be\ndeclaratively specified, deployed, updated and versioned. The declarative\ndefinition of infrastructure resources is sometimes called “infrastructure as\ncode”. These declarations enable the same infrastructure setup to be reproduced\nto different instances and even different underlying infrastructure. This\ncapability allows easy and reproduceable infrastructure environment deployment. `}</p>\n    <p>{`As there are many terraform providers for cloud infrastructure vendors,\nterraform skills can be transferred between cloud providers to build platforms\non multiple clouds.`}</p>\n    <p>{`Terraform is a useful tool for building `}<em parentName=\"p\">{`immutable infrastructure`}</em>{`, which is a\nparadigm where infrastructure is never modified after it is deployed.  This\nallows the state of the infrastructure to be completely defined by the declarative\ndefinitions, and destroyed and recreated when problems arise.`}</p>\n    <h3>{`Terraform resources`}</h3>\n    <p>{`In Terraform, a resource is a component of your infrastructure. It could be a\nlow level component such as a physical server, virtual machine, or container.\nIt could also be a higher level component such as an email provider, DNS record,\nor database provider. `}</p>\n    <h3>{`Terraform providers`}</h3>\n    <p>{`Infrastructure resources are provisioned by providers. Providers are responsible\nin Terraform for managing the lifecycle of a resource: create, read, update,\ndelete. A provider definition includes the necessary credentials to access the\ninfrastructure. A provider translates the declarative resources specified in the\nterraform language to API calls for the specific provider. Providers generally\nare available for an IaaS (e.g. AWS, GCP, Microsoft Azure, OpenStack),\nPaaS (e.g. Heroku), or\nSaaS service (e.g. Terraform Enterprise, DNSimple, CloudFlare).`}</p>\n    <p>{`Terraform uses provider plugins to generate resources for different\ninfrastructure components. Plugins allow terraform capabilities to be extended\nand new resource classes to be provisioned. The providers and plugins maintained\nby Hashicorp, the creator of Terraform, reside in a set of repositories in the\n`}<inlineCode parentName=\"p\">{`terraform-providers`}</inlineCode>{` organization in Github. Third party providers and plugins\ncan also be housed in other Github repositories.`}</p>\n    <h3>{`Terraform project layout`}</h3>\n    <p>{`Terraform modules and resource definitions are defined in a set of `}<inlineCode parentName=\"p\">{`*.tf`}</inlineCode>{` files.\nA module is a grouping of multiple resources that are used together and deployed\ntogether. The most common set of `}<inlineCode parentName=\"p\">{`*.tf`}</inlineCode>{` files you will see in the current\ndirectory from which you run your terraform deployment are as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`variables.tf`}</inlineCode>{` - This file contains the definitions for all the input\nvariables needed to deploy the resources defined in the module. Typically this\nfile contains variable declarations only, not variable values.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`outputs.tf`}</inlineCode>{` - This file defines any output or return value variables that\nwill be produced. The output values can be used by another module performing\nthe next step of a deployment.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`*.tf`}</inlineCode>{` - Any additional resources may be in other files with `}<inlineCode parentName=\"li\">{`*.tf`}</inlineCode>{` extension.\nThe provider plugins that will be used to deploy those resources, the name and\nlocation of `}<em parentName=\"li\">{`modules`}</em>{`, each of which contains the definitions and instructions\nto deploy a resource, and necessary variables for those plugins, resources and\nmodules. `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`terraform.tfvars`}</inlineCode>{` - This file is configured with the values to apply to\nvariables declared in `}<inlineCode parentName=\"li\">{`variables.tf`}</inlineCode>{`. This file may contain credentials and\nshould not be committed to source control without some type of access controls.`}</li>\n    </ul>\n    <h3>{`Terraform execution`}</h3>\n    <p>{`Before execution, prepare the variables file with all required variables as\ndefined in `}<inlineCode parentName=\"p\">{`variables.tf`}</inlineCode>{`. Use the `}<inlineCode parentName=\"p\">{`terraform init`}</inlineCode>{` command to download all\nrequired terraform providers and modules to the local directory.`}</p>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`terraform plan`}</inlineCode>{` command, we can check what terraform will do without\nactually making any infrastructure changes, which is helpful to examine what\nwould happen without incurring costs associated with creating or destroying\nresources.`}</p>\n    <p>{`When run using the `}<inlineCode parentName=\"p\">{`terraform apply`}</inlineCode>{` command, the variable substitutions are\nread from the `}<inlineCode parentName=\"p\">{`.tfvars`}</inlineCode>{` file.  Terraform internally generates a dependency\ngraph and will begin provisioning resources in a topological order.`}</p>\n    <h3>{`Terraform state and drift detection`}</h3>\n    <p>{`Terraform creates a state file with the `}<inlineCode parentName=\"p\">{`*.tfstate`}</inlineCode>{` extension to store the\nresults of resources it has provisioned during every `}<inlineCode parentName=\"p\">{`terraform apply`}</inlineCode>{` run.`}<br parentName=\"p\"></br>{`\n`}{`It uses this file to detect drift, which are differences in the actual\ninfrastructure and terraform’s own view of the resources it has created.`}<br parentName=\"p\"></br>{`\n`}{`For example, if someone has removed a virtual machine after deployment,\nterraform is able to compare its state file with the live state and recreate\nthe virtual machine according to the resource definitions.`}</p>\n    <h3>{`Terraform modules`}</h3>\n    <p>{`Terraform modules may be packaged in sub-directories or in separate\ngit repositories for code reuse.  The main\nlogic can be contained in a repo that combines one or more\nmodules to build a full end-to-end solution. Alternatively,\nthe main repo\nmay contain pointers to multiple modules, each of which\nresides in its own github repo. These modules are typically\nself-contained functions that often need to be run in a certain\nsequence. Some of the components may be shared across\ndifferent implementations. `}</p>\n    <h3>{`Using Terraform to install OpenShift 4`}</h3>\n    <p>{`Where requirements dictate a network-restricted installation, or some\nother infrastructure customization outside the capabilities of an\ninstaller-provisioned infrasture (IPI) installation, terraform can\nbe used to automate some or all of the user-provisioned infrastructure (UPI)\ninstallation.\nSample terraform\nscripts are provided in the sections for `}<a parentName=\"p\" {...{\n        \"href\": \"../openshift4_aws/\"\n      }}>{`AWS`}</a>{`,\n`}<a parentName=\"p\" {...{\n        \"href\": \"../openshift4_azure/\"\n      }}>{`Azure`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"../openshift4_gcp/\"\n      }}>{`Google Cloud Platform`}</a>{`,\nand `}<a parentName=\"p\" {...{\n        \"href\": \"../openshift4_vmware/\"\n      }}>{`VMware`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}