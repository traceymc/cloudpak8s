{"version":3,"sources":["webpack:///./src/pages/mcm/mcm13/cp4mcm_mcm_concepts/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kCACA,oUACA,mGACA,kCACA,iMACA,uFACA,uBAAK,sBAAMC,WAAW,OAAU,IAA3B,mVAgBL,qGACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,sPAIL,qGAAoF,0BAAYA,WAAW,KAAvB,eAApF,6CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,+sCAgBL,kFAAiE,0BAAYA,WAAW,KAAvB,eAAjE,2KAAoS,mBAAGA,WAAW,KAAQ,CACtT,KAAQ,wGADwR,wGAGpS,yCACA,iQACA,6CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,2WAqBL,4EAA2D,0BAAYA,WAAW,KAAvB,oBAA3D,0DAAkL,0BAAYA,WAAW,KAAvB,SAAlL,qLACA,8EAA6D,mBAAGA,WAAW,KAAQ,CAC/E,KAAQ,+GADiD,+GAG7D,uCACA,oFAAmE,0BAAYA,WAAW,KAAvB,WAAnE,YAAmI,0BAAYA,WAAW,KAAvB,iBAAnI,oWAAiiB,0BAAYA,WAAW,KAAvB,aAAjiB,KACA,8CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,2gBAyBL,gFAA+D,0BAAYA,WAAW,KAAvB,oBAA/D,gEAA4L,0BAAYA,WAAW,KAAvB,QAA5L,mJAAgY,0BAAYA,WAAW,KAAvB,oBAAhY,qGAAkiB,0BAAYA,WAAW,KAAvB,SAAliB,sCACA,mGACA,2FACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,6NAGL,mGAAkF,0BAAYA,WAAW,KAAvB,cAAlF,0JACA,+DACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,mMAIL,2CAA0B,0BAAYA,WAAW,KAAvB,SAA1B,iBAA6F,0BAAYA,WAAW,KAAvB,WAA7F,aACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,wDAEL,gEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,gXAIL,8HAA6G,0BAAYA,WAAW,KAAvB,YAA7G,iEACA,gDACA,mDAAkC,0BAAYA,WAAW,KAAvB,YAAlC,4FACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,0HAGL,6FAA4E,0BAAYA,WAAW,KAAvB,eAA5E,oBACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,8HAGL,mFAAkE,0BAAYA,WAAW,KAAvB,SAAlE,eACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uNAML,0GAAyF,mBAAGA,WAAW,KAAQ,CAC3G,KAAQ,6GAD6E,6GAGzF,sCACA,6PACA,+QACA,+CACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,uRAeL,kDACA,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,wGADT,yGAOPJ,EAAWK,gBAAiB","file":"component---src-pages-mcm-mcm-13-cp-4-mcm-mcm-concepts-index-mdx-42204e2e6050cc79e963.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-cloud-architecture/cloudpak8s/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Overview`}</h2>\n    <p>{`MCM Manages applications by defining them as custom resource definitions in Kubernetes. By defining these resources we can install, delete and update resources on the managed MCM clusters. When these MCM resources are created the changes are applied on the target MCM cluster via the MCM Klusterlet.`}</p>\n    <p>{`In the next sections we will explore the different resources MCM provides.`}</p>\n    <h2>{`Channels`}</h2>\n    <p>{`The channel resource defines the location of an resource to be deployed. These resources can be a Helm repository, Kubernetes namespace, Object store or Git repository.`}</p>\n    <p>{`The sample below describes a Channel the points to a HelmRepo.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create -f - <<EOF\napiVersion: v1\nkind: Namespace\nmetadata: \n  name: google-deployables\n---\napiVersion: app.ibm.com/v1alpha1\nkind: Channel\nmetadata:\n  name: google-incubator-repo\n  namespace: google-deployables\nspec:\n    type: HelmRepo\n    pathname: http://storage.googleapis.com/kubernetes-charts-incubator\nEOF\n`}</code></pre>\n    <p>{`Once the channel definition above has been applied you can get your channel.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get channels -n google-deployables\nNAME                    TYPE       PATHNAME                                                    AGE\ngoogle-incubator-repo   HelmRepo   http://storage.googleapis.com/kubernetes-charts-incubator   3m41s\n`}</code></pre>\n    <p>{`When the channel is created it will query the target HelmRepo and create MCM `}<inlineCode parentName=\"p\">{`deployables`}</inlineCode>{` for each of the Helm charts in the repo.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get deployables -n google-deployables\nNAME                                                               TEMPLATE-KIND   TEMPLATE-APIVERSION    AGE     STATUS\ngoogle-incubator-repo-artifactory-5.2.1                            HelmRelease     app.ibm.com/v1alpha1   5m39s\ngoogle-incubator-repo-aws-alb-ingress-controller-0.1.12            HelmRelease     app.ibm.com/v1alpha1   5m38s\ngoogle-incubator-repo-azuremonitor-containers-2.5.0                HelmRelease     app.ibm.com/v1alpha1   5m43s\n...\n...\n...\napp.ibm.com/v1alpha1   5m43s\ngoogle-incubator-repo-tensorflow-inception-0.4.1                   HelmRelease     app.ibm.com/v1alpha1   5m45s\ngoogle-incubator-repo-vault-0.23.4                                 HelmRelease     app.ibm.com/v1alpha1   5m50s\ngoogle-incubator-repo-vaultingkube-0.1.2                           HelmRelease     app.ibm.com/v1alpha1   5m50s\ngoogle-incubator-repo-webpagetest-agent-0.2.0                      HelmRelease     app.ibm.com/v1alpha1   5m50s\ngoogle-incubator-repo-webpagetest-server-0.2.1                     HelmRelease     app.ibm.com/v1alpha1   5m38s\ngoogle-incubator-repo-xray-0.3.2                                   HelmRelease     app.ibm.com/v1alpha1   5m49s\n`}</code></pre>\n    <p>{`You can see that all the Helm charts are now available as `}<inlineCode parentName=\"p\">{`deployables`}</inlineCode>{` and are available to be deployed using MCM. In this section a HelmRepo has been used as an example of a Channel. You can find additional information on Channels here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_channels.html\"\n      }}>{`https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_channels.html`}</a></p>\n    <h2>{`Placement Rules`}</h2>\n    <p>{`PlacementRules are an MCM resource that define where resources should be deployed. PlacementRules by themeselves do not do anything, but can be included as a reference in other resource types or embedded in other MCM resource types.`}</p>\n    <p>{`Below is an example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create -f - <<EOF\napiVersion: v1\nkind: Namespace\nmetadata: \n  name: etcd-project\n---\napiVersion: app.ibm.com/v1alpha1\nkind: PlacementRule\nmetadata:\n  name: my-placementrule\n  namespace: etcd-project\n  generation: 1\n  labels:\n    purpose: myapp\nspec:\n  clusterReplicas: 1\n  clusterLabels:\n    matchLabels:\n      cluster: myapp\nEOF\n`}</code></pre>\n    <p>{`The example PlacementRule is defining a rule called `}<inlineCode parentName=\"p\">{`my-placementrule`}</inlineCode>{` and will deploy only on clusters that match the label `}<inlineCode parentName=\"p\">{`myapp`}</inlineCode>{`. This is a simple example, but PlacementRules can be used to determine number of replicas and more complex logic can be applied to control where MCM resources will be deployed.`}</p>\n    <p>{`More information on PlacementRules can be found here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_placement_rules.html\"\n      }}>{`https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_placement_rules.html`}</a></p>\n    <h2>{`Subscriptions`}</h2>\n    <p>{`The Subscription resource is the resource that combines the `}<inlineCode parentName=\"p\">{`Channel`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`PlacementRule`}</inlineCode>{` to determine which resources should be deployed and where they should be deployed. A subscription does this by referencing a specific Deployable resource defined by a Channel and will either embed a PlacementRule or reference an existing PlacementRule. The Subscription can also modify the defualt values that maybe defined in a Deployable by defining `}<inlineCode parentName=\"p\">{`overrides`}</inlineCode>{`.`}</p>\n    <p>{`Example Subscription:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create -f - <<EOF\napiVersion: app.ibm.com/v1alpha1\nkind: Subscription\nmetadata:\n  name: etcd\n  namespace: etcd-project\n  labels:\n    purpose: myapp\nspec:\n  channel: google-deployables/google-incubator-repo\n  name: etcd\n  packageFilter:\n    version: 0.7.3\n  placement:\n    placementRef:\n      name: my-placementrule\n      kind: PlacementRule\n      group: app.ibm.com\n  overrides:\n    - clusterName: \"/\"\n      clusterOverrides:\n      - path: \"metadata.namespace\"\n        value: myapp\nEOF\n`}</code></pre>\n    <p>{`In the example above we are creating a namespace called `}<inlineCode parentName=\"p\">{`etc-subscription`}</inlineCode>{` and we are creating a Subscription in that namespace called `}<inlineCode parentName=\"p\">{`etcd`}</inlineCode>{`. The subscription references the etcd version 0.7.3 Helm chart in the google-incbuator Channel created earier and references the PlacementRule `}<inlineCode parentName=\"p\">{`my-placementrule`}</inlineCode>{`. At the end of the subscription an override is defined to deploy the Helm chart in the namespace `}<inlineCode parentName=\"p\">{`myapp`}</inlineCode>{` instead of the default namespace.`}</p>\n    <p>{`Note: The PlacementRule must be in the same namespace as the Subscription.`}</p>\n    <p>{`After this is Subsciption is applied we can view our Subscription.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get deployables.app.ibm.com -A | grep Subscription | grep etcd\netcd-project           etcd-deployable                                                    Subscription    app.ibm.com/v1alpha1   3m59s   Propagated\n`}</code></pre>\n    <p>{`Notice that this shows that we created a Subscription and the status shows `}<inlineCode parentName=\"p\">{`Propagated`}</inlineCode>{`. This shows us that we have successfully created the Subscription, but there are no clusters that meet the criteria as targets for our PlacementRule.`}</p>\n    <p>{`First let’s get our available clusters`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get clusters -A\nNAMESPACE   NAME      MANAGED BY   ENDPOINTS                           STATUS   AGE\nctcp4ai     ctcp4ai   hub0         api.ctcp4ai.ocp.csplab.local:6443   Ready    15h\n`}</code></pre>\n    <p>{`Next let’s add the `}<inlineCode parentName=\"p\">{`myapp`}</inlineCode>{` label to the `}<inlineCode parentName=\"p\">{`ctcp4ai`}</inlineCode>{` cluster.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc label cluster ctcp4ai -n ctcp4ai cluster=myapp\n`}</code></pre>\n    <p>{`Now let’s check our Subscription again `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get deployables.app.ibm.com -A | grep Subscription | grep etcd\nctcp4ai                etcd-deployable-fh798                                              Subscription    app.ibm.com/v1alpha1   3m58s   Deployed\netcd-project           etcd-deployable                                                    Subscription    app.ibm.com/v1alpha1   3m59s   Propagated\n`}</code></pre>\n    <p>{`Now we see that there is an additional Subscription in the namespace of the target cluster that shows `}<inlineCode parentName=\"p\">{`Deployed`}</inlineCode>{`. The HelmChart should now be deployed on the target cluster.`}</p>\n    <h4>{`From the target system`}</h4>\n    <p>{`Once the Subsciption shows `}<inlineCode parentName=\"p\">{`Deployed`}</inlineCode>{` on the MCM Hub server you should be able to see the subscription on the target cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get subscriptions.app.ibm.com --all-namespaces | grep etcd\nmyapp       etcd                    Subscribed   11m\n`}</code></pre>\n    <p>{`In addition since this is a Helm chart subscription you should see a `}<inlineCode parentName=\"p\">{`helmrelease`}</inlineCode>{` object as well:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get helmreleases.app.ibm.com --all-namespaces | grep etcd\nmyapp       etcd-etcd-myapp                           14m\n`}</code></pre>\n    <p>{`Finally we can see that the Helm chart was deployed to the `}<inlineCode parentName=\"p\">{`myapp`}</inlineCode>{` namespace.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc get po -n myapp\nNAME      READY     STATUS    RESTARTS   AGE\netcd-0    1/1       Running   0          8m17s\netcd-1    1/1       Running   0          7m59s\netcd-2    1/1       Running   0          7m42s\n`}</code></pre>\n    <p>{`Additional documentation can be found to describe the Subscription resource here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_subscriptions.html\"\n      }}>{`https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_subscriptions.html`}</a></p>\n    <h2>{`Applications`}</h2>\n    <p>{`The Application resource is used to reference other MCM resources that we want to define as an Application. Since an Application may be composed of multiple MCM resources we can use selectors to combine the different components.`}</p>\n    <p>{`If you login to the MCM Console and Navigate to Manage Applications you will not see our etcd subscription. Even though we have already deployed the components we will not be able to manage them as a whole until we create an Application resource.`}</p>\n    <p>{`See the example below:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl create -f - <<EOF\napiVersion: app.k8s.io/v1beta1\nkind: Application\nmetadata:\n  name: etcd-application\n  namespace: etcd-project\nspec:\n  selector:\n    matchLabels:\n      purpose: myapp\n  componentKinds:\n  - group: app.ibm.com\n    kind: Subscription\nEOF\n`}</code></pre>\n    <p>{`MCM channel documentation`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_channels.html\"\n      }}>{`https://www.ibm.com/support/knowledgecenter/en/SSFC4F_1.2.0/mcm/applications/managing_channels.html`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}